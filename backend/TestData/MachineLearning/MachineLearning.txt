So today we are going to learn about Machine Learning. Machine Learning is all about optimization, essentially you have several characteristics, and you are trying to find the best values for those characteristics. You start by creating a base model, in java, an Object Oriented Programming class. This contains several fields that store characteristics of the variation model. Say for example you are optimizing the geometry of an airplane. You can create a class named airplane with fields such as wingspan, wing_angle, length, weight, angle_of_attack, etc. Now you can make several instances of the class, to make prototypes with different characteristics. You should create several different prototypes with a broad range of values; you may have ideas of certain prototypes that you think might work, or maybe you just have a random number generator that randomizes values. Then you simulate the prototype, and get results on how well it performed. Then it's basically like evolution; the best prototypes survive to the next generation, while the poor ones are more likely to go extinct. Going back to the airplane example, maybe you create a computer model of the design and use fluid dynamics simulators to calculate the drag. Designs with high drag are less likely to survive to the next generation and vice versa. From here, you can do slight modifications to the prototypes with each generation, kind of like mutations in evolution. A good way to do this is using a bell curve. We can find the standard deviation of for example the wingspans of all the planes in a population and then when we mutate the models, a random number generator can input a number into a bell curve giving how many standard deviations to change the current prototype's wingspan by. After mutating all the prototypes, you have a new generation, which can be input in the simulation, repeating the process over and over again until you have a highly optimized prototype.